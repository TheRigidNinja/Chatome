{"version":3,"sources":["IMG/story.svg","serviceWorker.js","REDUCERS/ProfileReducer.js","REDUCERS/MessagingReducer.js","REDUCERS/ServerIDReducer.js","REDUCERS/RootReducer.js","FIREBASE/FBConfig.js","JS/LoginHandler/ProfilePic.js","JS/Socket.js","JS/LoginHandler/LoginPage.js","JS/MessageHandler/Texts.js","JS/Cookie.js","JS/MessageHandler/PhoneCall/StreamingHandler.js","JS/MessageHandler/PhoneCall/PhoneCall.js","JS/MessageHandler/TextingHandler.js","JS/MessageHandler/MessagingBoard.js","JS/ProfileHandler/People.js","JS/ProfileHandler/Stories.js","JS/ProfileHandler/YourProfileInfor.js","JS/ProfileHandler/OnlinePeople.js","JS/ProfileHandler/MainPage.js","App.js","index.js","IMG/defaultPic.jpeg","IMG/Loader.gif"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","initState","ProfileReducer","state","arguments","length","undefined","action","type","Object","objectSpread","data","latestChats","stutas","MessagingReducer","ServerIDReducer","RootReducer","combineReducers","ProfileDB","MessagingDB","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ProfilePic","toggleProfile","profilePic","defaultPic","options","left","width","defaultPage","_this","handleProfilePicToState","setRef","webcam","capture","imageSrc","getScreenshot","toggleCamera","setState","checkTouchDevice","uploadImage","document","querySelector","addEventListener","event","handleChangeEvent","click","linkedImage","submitLink","link","value","RegExp","test","props","WarningHandler","target","files","size","imgUrl","URL","createObjectURL","revealOptions","className","includes","_this2","this","getElementById","parentNode","documentElement","react_default","a","createElement","react_webcam_default","audio","ref","screenshotFormat","videoConstraints","height","facingMode","onClick","Fragment","src","alt","title","id","style","imgStyle","accept","placeholder","Component","socket","socketIOClient","pageToggle","LoginPage","avatar","opacity","margin-top","userNameStyle","display","alert","padding","RegisterBox","dom","querySelectorAll","userName","userLabel","offsetHeight","setAttribute","removeAttribute","innerText","replace","setTimeout","reload","preventDefault","elms","returnLogs","myLoginData","picture","toString","newCustomer","checked","email","password","ValidateFormData","RegisterHandler","LoginHandler","checkInType","myDetails","history","push","Fire","auth","createUserWithEmailAndPassword","then","userInfo","timeStamp","Date","parse","uuID","user","uid","status","messageKey","Math","random","substring","phoneUpdate","accountCreatedDATE","emailUpdate","pictureUpdate","catch","error","message","_this3","signInWithEmailAndPassword","formData","warnings","emit","promise","Promise","resolve","on","res","_this4","onSubmit","SubmitForm","ProfilePic_ProfilePic","onChange","htmlFor","required","connect","dispatch","Chats","_ref","ChatData","myUserName","ImgSrc","console","log","map","msg","keys","name","key","Cookie","Actiontype","objName","objValue","values","date","expires","setTime","getTime","i","cookie","SetCookie","Objvalues","re","exec","GetsCookie","video","cv","openCV","StreamingHandler","navigator","mediaDevices","enumerateDevices","offsetWidth","getUserMedia","stream","srcObject","play","Mat","CV_8UC4","CV_8UC1","err","concat","myVideoStream","PhoneCall","phoneType","HandlePhoneCall","recipientData","Streaming","pic","class","TextingHandler","_Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","firstInput","textArea","textAreaPos","top","inherits","createClass","TextAreaEventAction","hght","contentEditable","onInput","MessagingBoard","chatRooms","myMSGRoom","textAreaStyle","textHeight","togglePhoneCall","PhoneCallStyle","z-index","initialGetMessageFromServer","friendsMSGKeys","friends","inboxState","messages","handleLastChats","sendMessageToServer","checkKey","key2","recipient","recipientName","friend","people","activeChatID","me","myDataID","userMSGForm","trim","localMSG","defineProperty","toConsumableArray","getFriendMessage","myDetail","roomID","myID","myMSGkey","recipientKey","key1","localMsg1","localMsg2","localMSGDATA","globalMSGDATA","ActionType","lastChats","myName","roomType","_i","_Object$keys","msgKey","lastMSG","profileDetails","phone","zIndex","toggleType","messageScroll","chatScrollHght","scrollTop","scrollHeight","togglePage","messageData","friendsMSGkey","tempKey1","split","myChats","MessageHandler_TextingHandler","PhoneCall_PhoneCall","InboxPeople","chats","paragraphStyle","font-weight","color","ID","userDetail","messagekey","Stories","info","ProfileManager","OnlinePeople","MainPage","stories","ProfileStyle","StoriesStyle","MainPageStyle","getUsersProfileDATA","updatedData","PageType","cookieData","InboxElements","ExploreStories","MyProfile","Footer","e","Stories_Stories","YourProfileInfor","PeopleOnline","SearchBar","MessageHandler_MessagingBoard","inboxToMessage","loaderGIF","myProfileDetails","App","react_router_dom","react_router","exact","path","component","Login","ProfilePage","store","createStore","ReactDOM","render","es","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2724fdb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/story.00958436.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n};\n\nconst ProfileReducer = (state = initState, action) => {\n  if (action.type === \"UPDATE\") {\n    return {\n      ...state,\n      ...action.data\n    };\n  }\n\n  if(action.type === \"LATESTCHATS\"){\n    return {\n      ...state,\n      latestChats: action.stutas\n    };  \n  }\n\n  return initState;\n};\n\nexport default ProfileReducer;\n","const initState = {};\n\nconst MessagingReducer = (state = initState, action) => {\n\n  // if(action.type === \"LATESTCHATS\"){\n  //   return {\n  //     ...state,\n  //     LatestChats: action.stutas\n  //   };  \n  // }\n\n  \n  return initState;\n};\n\nexport default MessagingReducer;\n","const initState = {};\n  \n\n  const ServerIDReducer = (state = initState, action) => {\n\n    if (action.type === \"SERVERID\") {\n       return { \n         ...state, \n         ...action.data\n        }; \n    } \n\n    return initState\n  };\n  \n  export default ServerIDReducer","import ProfileReducer from \"./ProfileReducer\"\nimport MessagingReducer from \"./MessagingReducer\";\nimport ServerIDReducer from \"./ServerIDReducer\"\nimport { combineReducers } from \"redux\"\n\nconst RootReducer = combineReducers({\n    ProfileDB: ProfileReducer,\n    MessagingDB: MessagingReducer,\n    ServerIDReducer: ServerIDReducer\n});\n\nexport default RootReducer;\n\n","import firebase from \"../../node_modules/firebase\";\n\n // Firebase Config KEY\n  var firebaseConfig = {\n    apiKey: \"AIzaSyBa292saQfeQuy-uSq0kur6Zu2UeUdmfuQ\",\n    authDomain: \"chatapp-66db3.firebaseapp.com\",\n    databaseURL: \"https://chatapp-66db3.firebaseio.com\",\n    projectId: \"chatapp-66db3\",\n    storageBucket: \"chatapp-66db3.appspot.com\",\n    messagingSenderId: \"545363742777\",\n    appId: \"1:545363742777:web:dc3890605187645d\"\n  };\n\nconst fire = firebase.initializeApp(firebaseConfig);\n\nexport default fire; ","import React, { Component } from \"react\";\nimport Webcam from \"react-webcam\";\nimport \"../../CSS/RegisterPhoto.css\";\nimport defaultPic from \"../../IMG/defaultPic.jpeg\";\n\nexport default class ProfilePic extends Component {\n  state = {\n    toggleProfile: \"default\",\n    profilePic: defaultPic,\n    options: {\n      left: \"calc(100% - 79px)\",\n      width: \"54.4px\"\n    }\n  };\n\n  componentDidMount() {\n    // ----- // This function handles when user clicks on window ---> Its for toggling options menu when choosing avatar for your profile\n    var elm = document.getElementById(\"root\");\n    elm.addEventListener(\"click\", event => {\n      if (event.target.parentNode.className !== \"uploadMethods\") {\n        this.revealOptions(event, \"window\");\n      }\n    });\n  }\n\n  // ----- // This will trigger if user wants to get to default state\n  defaultPage = () => {\n    this.handleProfilePicToState(this.state.profilePic);\n  };\n\n  // ----- // Checking if device is touch screen\n  checkTouchDevice() {\n    return \"ontouchstart\" in document.documentElement;\n  }\n\n  // ----- // Taking screen Shots\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  // ----- // Functions handles taking a photo\n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.handleProfilePicToState(imageSrc);\n  };\n\n  // ----- // Determines if phone camera should be used or computer web cam\n  toggleCamera = () => {\n    this.setState(\n      {\n        toggleProfile: this.checkTouchDevice()\n          ? \"Phone_Camera\"\n          : \"Computer_Camera\"\n      },\n      () => {\n        if (this.state.toggleProfile === \"Phone_Camera\") {\n          let uploadImage = document.querySelector(\".uploadImage\");\n          uploadImage.addEventListener(\"change\", event => {\n            this.handleChangeEvent(event);\n          });\n          uploadImage.click();\n        }\n      }\n    );\n  };\n\n  // ----- // Activates upload image method\n  uploadImage = () => {\n    this.setState(\n      {\n        toggleProfile: \"UploadImage\"\n      },\n      () => {\n        let uploadImage = document.querySelector(\".uploadImage\");\n        uploadImage.addEventListener(\"change\", event => {\n          this.handleChangeEvent(event);\n        });\n        uploadImage.click();\n      }\n    );\n  };\n\n  // ----- // Activates when clicked link icon\n  linkedImage = () => {\n    this.setState({\n      toggleProfile: \"LinkedImage\"\n    });\n  };\n\n  // ----- // Checks if link is valid as IMG other wise return an err OR Procced\n  submitLink = () => {\n    let link = document.querySelector(\".urlImage\").value,\n      re = new RegExp(\".jpeg|.jpg|.png|.gif\");\n\n    // Check if URL is an image\n    if (!/(\\.jpeg|\\.jpg|\\.png|\\.gif)/g.test(link)) {\n      this.props.WarningHandler(\n        \"URL is not not an Image. Please provide a valid Image URL\"\n      );\n      document.querySelector(\".urlImage\").value = \"\";\n    } else {\n      this.handleProfilePicToState(link);\n    }\n  };\n\n  // ----- // Handles when Event changes on upload\n  handleChangeEvent = event => {\n    if (event.target.files[0] && event.target.files[0].size < 512284) {\n      let imgUrl = URL.createObjectURL(event.target.files[0]);\n      this.handleProfilePicToState(imgUrl);\n    } else {\n      // Give warning\n      this.props.WarningHandler(\n        \"Image Size Too Big!! Please Choose images that are < than 512 KB\"\n      );\n    }\n  };\n\n  // ----- // Sends image to state for later use\n  handleProfilePicToState = imageSrc => {\n    this.setState({\n      toggleProfile: \"Profile\",\n      profilePic: imageSrc\n    });\n  };\n\n  // ----- // Reveals / Hides more option when taking profile photos\n  revealOptions = (event, action) => {\n    if (\n      event.target.className === \"fas fa-hand-point-right\" ||\n      this.state.options.width !== \"54.4px\"\n    ) {\n      var left = \"calc(100% - 79px)\",\n        width = \"54.4px\";\n\n      if (\n        event.target.className === \"fas fa-hand-point-right\" &&\n        this.state.options.width !== \"231px\"\n      ) {\n        left = \"calc(100% - 216px)\";\n        width = \"231px\";\n      }\n\n      this.setState({\n        options: {\n          left: left,\n          width: width\n        }\n      });\n    }else if (\n      ![\"SubmitLink\", \"urlImage\", \"uploadImage\"].includes(\n        event.target.className\n      )\n    ) {\n      this.defaultPage();\n    }\n  };\n      // Reset the toggled button\n\n  render() {\n    switch (this.state.toggleProfile) {\n      // ----- // Handler computer camera\n\n      case \"Computer_Camera\":\n        const videoConstraints = {\n          width: 300,\n          height: 300,\n          facingMode: \"user\"\n        };\n\n        return (\n          <div className=\"Camera\">\n            <Webcam\n              className=\"RegisterPic\"\n              audio={false}\n              ref={this.setRef}\n              screenshotFormat=\"image/jpeg\"\n              width={300}\n              videoConstraints={videoConstraints}\n            />\n            <span onClick={this.capture} className=\"takePic\">\n              <span />\n            </span>\n          </div>\n        );\n\n      // ----- // Handle phone camera\n      case \"Phone_Camera\":\n        return (\n          <>\n            <img\n              src={this.state.profilePic}\n              alt=\"Avatar\"\n              title=\"Choose your avatar\"\n              id=\"picture\"\n              className=\"demoPic\"\n              style={this.props.imgStyle}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              capture=\"camera\"\n              className=\"uploadImage\"\n            />\n          </>\n        );\n\n      // ----- // Handles on upload image\n      case \"UploadImage\":\n        return (\n          <>\n            <img\n              src={this.state.profilePic}\n              alt=\"Avatar\"\n              title=\"Choose your avatar\"\n              id=\"picture\"\n              className=\"demoPic\"\n              style={this.props.imgStyle}\n            />\n            <input type=\"file\" accept=\"image/*\" className=\"uploadImage\" />\n          </>\n        );\n\n      case \"LinkedImage\":\n        return (\n          <>\n            <img\n              src={this.state.profilePic}\n              alt=\"Avatar\"\n              title=\"Choose your avatar\"\n              id=\"picture\"\n              className=\"demoPic\"\n              style={this.props.imgStyle}\n            />\n\n            <div className=\"LinkedImage\">\n              <input\n                type=\"text\"\n                placeholder=\"https://..... .jpg\"\n                className=\"urlImage\"\n              />\n              <span className=\"SubmitLink\" onClick={this.submitLink}>\n                Done!\n              </span>\n            </div>\n          </>\n        );\n      // ----- // Default display\n      default:\n        return (\n          <>\n            <div className=\"uploadMethods\" style={this.state.options}>\n              <i\n                className=\"fas fa-hand-point-right\"\n                onClick={this.revealOptions}\n              />\n              <i className=\"fas fa-camera-retro\" onClick={this.toggleCamera} />\n              <i className=\"fas fa-upload\" onClick={this.uploadImage} />\n              <i className=\"fas fa-link\" onClick={this.linkedImage} />\n            </div>\n\n            <img\n              src={this.state.profilePic}\n              alt=\"Avatar\"\n              title=\"Choose your avatar\"\n              id=\"picture\"\n              style={this.props.imgStyle}\n            />\n          </>\n        );\n    }\n  }\n}\n","import socketIOClient from \"socket.io-client\";\n\n// ----- // Socket connector handler\nconst socket = (() => {\n  return socketIOClient(\"https://chatome56.herokuapp.com/\");\n})();\n\nexport default socket;\n","import React, { Component } from \"react\";\nimport \"../../CSS/Authentifacation.css\";\nimport Fire from \"../../FIREBASE/FBConfig\";\nimport { connect } from \"react-redux\";\nimport ProfilePic from \"./ProfilePic\";\nimport socket from \"../Socket\";\n\nvar pageToggle = 0;\nclass LoginPage extends Component {\n  state = {\n    avatar: {\n      opacity: 0,\n      \"margin-top\": -230\n    },\n    userNameStyle: {\n      display: \"none\"\n    },\n    alert: { padding: 0 }\n  };\n\n  componentDidMount() {\n    pageToggle += 1;\n    if (pageToggle >= 2) {\n      window.location.reload();\n    }\n  }\n\n  //----//  This function handles form submition --> It simply sends user content to props\n  //----//  It also Takes user to the chat app home\n  async SubmitForm(event) {\n    event.preventDefault();\n\n    var elms = document.querySelectorAll(\n        \"#check1, #picture, #userLabel, #email, #password\"\n      ),\n      returnLogs = null,\n      myLoginData = {\n        picture: elms[0].src.toString(),\n        newCustomer: elms[1].checked,\n        userName: elms[2].value,\n        email: elms[3].value,\n        password: elms[4].value\n      };\n\n    // Validates Form Data and checks if everything is correct\n    if (await this.ValidateFormData(myLoginData)) {\n      if (myLoginData.newCustomer === true) {\n        returnLogs = await this.RegisterHandler(myLoginData);\n      } else {\n        returnLogs = await this.LoginHandler(myLoginData);\n      }\n      // Changes page IF user successfully Login or registers\n      if (\n        returnLogs !== null &&\n        [\"Login\", \"Register\"].includes(returnLogs.checkInType)\n      ) {\n        this.props.myDetails(returnLogs); // Set to props\n        this.props.history.push(\"/chat\");\n      }\n    }\n  }\n\n  //----// This function is triggered when user toggles \"I'm new here Checkbox\"\n  RegisterBox = () => {\n    var dom = document.querySelectorAll(\".userName, #userLabel\"),\n      userName = dom[0],\n      userLabel = dom[1];\n\n    if (userName.offsetHeight === 0) {\n      userLabel.setAttribute(\"required\",\"required\");\n      alert(\"I see you want to Register,\\n\\n You can use a 'FAKE' Email or 'Username'. \\n\\nI will not collect any information that you provide beyond the use on this application. \\n\\n Cheers!\")\n\n      // formgroup\n      this.setState({\n        avatar: {\n          opacity: 1,\n          \"margin-top\": 0\n        },\n        userNameStyle: {\n          display: \"block\"\n        }\n      });\n    } else {\n      userLabel.removeAttribute(\"required\");\n      this.setState({\n        avatar: {\n          opacity: 0,\n          \"margin-top\": -230\n        },\n        userNameStyle: {\n          display: \"none\"\n        }\n      });\n    }\n  };\n\n  //----// This function will trigger when a user wants to register --> the trigger happens when a user presses submit button\n  RegisterHandler(myLoginData) {\n    return Fire.auth()\n      .createUserWithEmailAndPassword(myLoginData.email, myLoginData.password)\n      .then(userInfo => {\n        delete myLoginData.email;\n        delete myLoginData.password;\n        delete myLoginData.newCustomer;\n\n        const timeStamp = Date.parse(new Date()),\n          myFormInfo = {\n            uuID: userInfo.user.uid,\n            ...myLoginData,\n            status: \"Online\",\n            checkInType: \"Register\",\n            messageKey: (Math.random() * 1000)\n              .toString(16)\n              .substring()\n              .replace(/[.]/g, \"\"),\n            phoneUpdate: timeStamp,\n            accountCreatedDATE: timeStamp,\n            emailUpdate: timeStamp,\n            pictureUpdate: timeStamp\n          };\n\n        return myFormInfo;\n      })\n      .catch(error => {\n        return this.WarningHandler(error.message);\n      });\n  }\n\n  //----//   Handles Login process, It triggers when user presses Submit button\n  LoginHandler(myLoginData) {\n    return Fire.auth()\n      .signInWithEmailAndPassword(myLoginData.email, myLoginData.password)\n      .then(userInfo => {\n        return { uuID: userInfo.user.uid, checkInType: \"Login\" };\n      })\n      .catch(error => {\n        return this.WarningHandler(error.message);\n      });\n  }\n\n  //----//  This function only works after user presses submit --> It will check user input if valid\n  async ValidateFormData(formData) {\n    var warnings = \"\";\n\n    if (formData.password.replace(\" \", \"\").length < 6) {\n      warnings += \"Password must be > 6 char|\";\n    }\n\n    if (formData.newCustomer === true && formData.userName.length < 4) {\n      warnings += \"User Name must be > 4 char|\";\n    }\n\n    // Check for userName in the server\n    if (formData.newCustomer === true) {\n      socket.emit(\"FetchUserNames\", formData.userName);\n\n      // Wait for response\n      var promise = new Promise(resolve => {\n        socket.on(\"ReturnUserNames\", res => {\n          resolve(res);\n        });\n      });\n\n      warnings += await promise;\n    }\n\n    // Showing warnings to the user\n    if (warnings !== \"\") {\n      return this.WarningHandler(warnings);\n    } else {\n      return true;\n    }\n  }\n\n  //-----// This function handles all alerts, to let the user know whats wrong\n  WarningHandler = data => {\n    let alert = document.getElementById(\"Alert\");\n    alert.innerText = data.replace(/\\|/g, \"\\n\");\n\n    this.setState({\n      alert: { padding: 20 }\n    });\n\n    // Warning timeout\n    setTimeout(() => {\n      alert.innerText = \"\";\n      this.setState({\n        alert: { padding: 0 }\n      });\n    }, 5000);\n\n    return false;\n  };\n\n  render() {\n    return (\n      <section className=\"LoginSection\">\n        <span id=\"Alert\" style={this.state.alert} />\n\n        <div className=\"content container\">\n          <h3>Welcome to Chatome</h3>\n\n          <form\n            onSubmit={event => this.SubmitForm(event)}\n            className=\"container d-flex flex-column LoginForm\"\n          >\n            <div className=\"avatar\" style={this.state.avatar}>\n              <ProfilePic\n                imgStyle={this.state.avatar}\n                WarningHandler={this.WarningHandler}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <input\n                className=\"styled-checkbox\"\n                id=\"check1\"\n                type=\"checkbox\"\n                onChange={this.RegisterBox}\n              />\n              <label htmlFor=\"check1\"> I'm new to this!!!</label>\n            </div>\n\n            <div\n              className=\"form-group userName\"\n              style={this.state.userNameStyle}\n            >\n              <label>*User Name</label>\n              <input type=\"text\" placeholder=\"e.g: Smaff56\" id=\"userLabel\" />\n            </div>\n\n            <div className=\"form-group\">\n              <label>*Email</label>\n              <input\n                type=\"email\"\n                placeholder=\"e.g: example@gmail.com\"\n                id=\"email\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>*Password </label>\n              <input type=\"password\" id=\"password\" required />\n            </div>\n\n            <input type=\"submit\" id=\"Submit\" />\n          </form>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    myDetails: stutas => {\n      dispatch({ type: \"UPDATE\", data: stutas });\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(LoginPage);\n","import React from \"react\";\n\nexport default function Chats({ ChatData, myUserName, ImgSrc }) {\n\n  console.log(\"Active Chats\");\n\n  const UserMessages = () => {\n    if (ChatData) {\n      return ChatData.map(msg => {\n        var userName = Object.keys(msg);\n\n        // Replay Message Style\n        if (msg.name !== myUserName) {\n          return (\n            <li className=\"replyMessage\" key={myUserName + Math.random()}>\n              <time>{msg.timeStamp}</time>\n              <div>\n                <img src={ImgSrc} id=\"userIcon\" alt=\"IMG\" />\n                <label>{msg.name}</label>\n                <div>{msg.message}</div>\n              </div>\n            </li>\n          );\n\n          // Sending message Style\n        } else {\n          return (\n            <li className=\"sentMessage\" key={userName + Math.random()}>\n              <time>{msg.timeStamp}</time>\n              <div>\n                <label>{msg.name}</label>\n                <div>{msg.message}</div>\n              </div>\n            </li>\n          );\n        }\n      });\n    } else {\n      //  Return Empty if no Messages\n      return <></>;\n    }\n  };\n\n  return <UserMessages />;\n}\n","// import React from \"react\";\n\n// ----- // Main function to determine which support function should fire\nexport default function Cookie(Actiontype, data) {\n  if (Actiontype === \"SET\") {\n    return SetCookie(data);\n  } else if (Actiontype === \"GET\") {\n    return GetsCookie(data);\n  }\n}\n\n// ----- // Support function to handle getting or writting cookies\nfunction SetCookie(data) {\n  var objName = Object.keys(data),\n    objValue = Object.values(data),\n    date = new Date(),\n    expires =\n      \"expires=\" + date.setTime(date.getTime() + 1 * 24 * 60 * 60 * 1000);\n\n  for (let i = 0; i < objValue.length; i++) {\n    document.cookie =\n      objName[i] + \"=\" + objValue[i] + \";\" + expires + \";path=/\";\n  }\n\n  return \"Success\";\n}\n\nfunction GetsCookie(key) {\n  var Objvalues = [];\n  for (let i = 0; i < key.length; i++) {\n    var re = new RegExp(key[i] + \"=([^;]+)\"),\n      value = re.exec(document.cookie),\n      value = value != null ? value[1] : null;\n\n    Objvalues.push(value);\n  }\n\n  return Objvalues;\n}\n","import React from \"react\";\n\nvar video,\n  recipientVideo,\n  cv = window.openCV;\n\nexport default function StreamingHandler(data) {\n\n  if (data === \"GetElm\" && !(!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices)) {\n    setTimeout(() => {\n      video = document.querySelector(\".myVideo\");\n      recipientVideo = document.querySelector(\".recipientVideo\");\n\n      myVideoStream();\n    }, 100);\n  } else {\n  }\n}\n\nfunction myVideoStream() {\n  let height = video.offsetHeight,\n    width = video.offsetWidth,\n    streaming = false,\n    FPS = 30,\n    src,\n    dst;\n  // const cap = new cv.VideoCapture(video);\n\n  // Getting a video from webcam to stream online\n  navigator.mediaDevices\n    .getUserMedia({ video: { width: 200, height: 300 }, audio: true })\n    .then(stream => {\n      video.srcObject = stream;\n      video.play();\n      streaming = true;\n      src = new cv.Mat(height, width, cv.CV_8UC4);\n      dst = new cv.Mat(height, width, cv.CV_8UC1);\n      // setTimeout(processVideo, 0);\n    })\n    .catch(err => console.log(`An error occurred: ${err}`));\n\n  // Processing video to get Image data so i can stream to my server\n  // function processVideo() {\n  //   if (!streaming) {\n  //     src.delete();\n  //     dst.delete();\n  //     return;\n  //   }\n  //   const begin = Date.now();\n  //   cap.read(src);\n  //   // cv.cvtColor(src, dst, cv.COLOR_RGBA2GRAY);\n  //   cv.imshow(\"canvasOutput\", dst);\n  //   const delay = 1000 / FPS - (Date.now() - begin);\n  //   setTimeout(processVideo, delay);\n  // }\n}\n","import React from \"react\";\nimport \"../../../CSS/PhoneCall.css\";\nimport Streaming from \"./StreamingHandler\";\n\nexport default function PhoneCall({\n  phoneType,\n  HandlePhoneCall,\n  recipientData\n}) {\n  // console.log(window.openCV);\n\n  if (phoneType) {\n    Streaming(\"GetElm\");\n\n    return (\n      <>\n        {/* Video element for streaming */}\n        <video className=\"myVideo\" />\n        <canvas className=\"recipientVideo\" />\n\n        <div className=\"ControlCont\">\n          <div>\n            <div className=\"PhoneProfile\">\n              <img src={recipientData.pic} />\n              <label>{recipientData.name}</label>\n              <small>Ringing...</small>\n            </div>\n\n            <div className=\"Controls\">\n              <span>\n                <i class=\"fas fa-microphone-alt-slash\" />\n                <label>Mute</label>\n              </span>\n              <span>\n                <i class=\"fas fa-volume-up\" />\n                <label>Speaker</label>\n              </span>\n              <span>\n                <i className=\"fas fa-video\" />\n                <label>Video</label>\n              </span>\n            </div>\n          </div>\n\n          <div className=\"endCall\">\n            <span onClick={() => HandlePhoneCall(\"MSG\")}>\n              <i className=\"fas fa-phone\" />\n            </span>\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return <></>;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../../CSS/TextArea.css\";\n\nexport class TextingHandler extends Component {\n  state = {\n    firstInput: false,\n    textArea: null,\n    textAreaPos: {\n      top: \"calc(100% - 45px)\"\n    }\n  };\n\n  componentDidMount() {\n    let textArea = document.querySelector(\".MSGBox\");\n    textArea.addEventListener(\"drag\", () => {\n      this.TextAreaEventAction(\"drag\");\n    });\n\n    this.setState({\n      textArea: textArea\n    });\n  }\n\n  TextAreaEventAction(action) {\n    console.log(\"Active Text area\");\n\n    switch (action) {\n      case \"Input\":\n        let hght = this.state.textArea.offsetHeight;\n\n        this.setState({\n          textAreaPos: {\n            top: \"calc(100% - \" + (hght + 10) + \"px)\"\n          }\n        });\n        console.log(hght);\n        break;\n\n      case \"drag\":\n        break;\n\n      default:\n        return false;\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"userTyping\" style={this.state.textAreaPos}>\n        <div className=\"messageTools\">\n          <span className=\"InsertImage\">\n            <i class=\"fas fa-chevron-right\"/>\n            {/* <i class=\"fas fa-mountain\" />\n            <i className=\"fas fa-camera-retro\" />\n            <i className=\"fas fa-image\" /> */}\n          </span>\n\n          <span className=\"TextArea\">\n            <div\n              className=\"MSGBox\"\n              contentEditable=\"true\"\n              onInput={() => this.TextAreaEventAction(\"Input\")}\n            >\n              New Message\n            </div>\n      \n            <i className=\"fas fa-laugh\" id=\"emoji\" />\n          </span>\n\n          <span className=\"submitMessage\">\n            <i\n              className=\"fas fa-paper-plane\"\n              id=\"submitMessage\"\n              //   onClick={() => this.sendMessageToServer(myUserName, checkKey, key2)}\n            />\n          </span>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default TextingHandler;\n","import React, { Component } from \"react\";\nimport \"../../CSS/Messaging.css\";\nimport Texts from \"./Texts\";\nimport socket from \"../Socket\";\nimport { connect } from \"react-redux\";\nimport Cookie from \"../Cookie\";\n// import LZString from \"lz-string\";\nimport PhoneCall from \"./PhoneCall/PhoneCall\";\nimport TextArea from \"./TextingHandler\";\n\nclass MessagingBoard extends Component {\n  state = {\n    chatRooms: {},\n    myMSGRoom: {},\n    textAreaStyle: {\n      height: \"35px\"\n    },\n    textHeight: false,\n    togglePhoneCall: false,\n    phoneType: null,\n    PhoneCallStyle: {\n      \"z-index\": \"-1\"\n    }\n  };\n\n  componentWillMount() {\n    // Tries to get User MSG after Page loads from server\n    this.initialGetMessageFromServer();\n  }\n\n  componentDidUpdate() {\n    console.log(\"object\");\n    if (this.props.inboxState.toggleType === \"MessagingBoard\") {\n      // Scrolls message Board\n      this.messageScroll();\n    }\n  }\n\n  // This is the process of getting Pre- Messages from Online DataBase\n  initialGetMessageFromServer = () => {\n    var uuID = Cookie(\"GET\", [\"uuID\"])[0],\n      friendsMSGKeys = {\n        checkInType: \"Friends\",\n        uuID: uuID,\n        friends: this.props.inboxState.friends\n      };\n\n    // The Socket that triggers A server Function to get Messages\n    socket.emit(\"GetMessages\", friendsMSGKeys, uuID);\n\n    // Waits for prov Messages after emitting\n    socket.on(\"MSGChannel\", (messages, key, action) => {\n      this.setState(\n        {\n          chatRooms: {\n            ...this.state.chatRooms,\n            ...messages\n          }\n        },\n        () => {\n          // Get latest MSG\n          this.handleLastChats(\"GetInitialMSG\");\n        }\n      );\n    });\n  };\n\n  // ----- // Scrolls Down Messages from the Message Dashboard\n  messageScroll() {\n    var chatScrollHght = document.querySelector(\".msgDashboard\");\n    chatScrollHght.scrollTop = chatScrollHght.scrollHeight;\n  }\n\n  // ----- // Function that handles Sending Messages to the server\n  sendMessageToServer = (myUserName, checkKey, key2) => {\n    var recipient = this.props.inboxState,\n      recipientName = {\n        friend: recipient.people[recipient.activeChatID].userName,\n        me: recipient.people[recipient.myDataID].userName\n      },\n      userMSGForm = {\n        message: document.querySelector(\"#userMessage\").value,\n        checkInType: \"Register\",\n        messageKey: checkKey,\n        name: myUserName,\n        recipient: recipientName.friend,\n        uuID: Cookie(\"GET\", [\"uuID\"])[0],\n        timeStamp: Date.parse(new Date())\n      };\n\n    // Makes sure MSG box is not empty\n    if (\n      userMSGForm.message.trim() !== \"\" &&\n      userMSGForm.message.length <= 3000\n    ) {\n      // ----- // Sends Message to the server Here\n      console.log(\"Sending\");\n      socket.emit(\"SendMessage\", userMSGForm, userMSGForm.uuID, recipientName);\n\n      delete userMSGForm.uuID;\n      delete userMSGForm.messageKey;\n      delete userMSGForm.checkInType;\n\n      var localMSG = this.state.myMSGRoom[key2];\n      localMSG = localMSG ? localMSG : [];\n\n      this.setState(\n        {\n          myMSGRoom: {\n            ...this.state.myMSGRoom,\n            [key2]: [...localMSG, userMSGForm]\n          }\n        },\n        () => {\n          // Get latest MSG\n          this.handleLastChats(\"GetLocalMSG\");\n        }\n      );\n    }\n  };\n\n  // ----- // Gets any messages from friends of people wanting to be friends\n  getFriendMessage = myDetail => {\n    socket.emit(\"UserDetails\", myDetail);\n\n    socket.on(myDetail.roomID, res => {\n      let recipientData = res.messageKey;\n\n      if (recipientData) {\n        let myID = this.props.inboxState.myDataID,\n          myMSGkey = this.props.inboxState.people[myID].messageKey,\n          recipientKey = recipientData.replace(myMSGkey, \"\"),\n          key1 = recipientKey + myMSGkey,\n          key2 = myMSGkey + recipientKey,\n          localMsg1 = this.state.myMSGRoom[key1],\n          localMsg2 = this.state.myMSGRoom[key2],\n          localMSGDATA = [],\n          checkKey = \"\",\n          globalMSGDATA = this.state.chatRooms[recipientData];\n        globalMSGDATA = globalMSGDATA ? globalMSGDATA : [];\n\n        // Checking for local MSG KEY\n        if (localMsg1) {\n          localMSGDATA = localMsg1;\n          checkKey = key1;\n        } else if (localMsg2) {\n          localMSGDATA = localMsg2;\n          checkKey = key2;\n        }\n\n        delete res.uuID;\n        delete res.messageKey;\n        delete res.checkInType;\n\n        this.setState(\n          {\n            chatRooms: {\n              ...this.state.chatRooms,\n              [recipientData]: [...globalMSGDATA, ...localMSGDATA, res]\n            },\n            myMSGRoom: {\n              ...this.state.myMSGRoom,\n              [checkKey]: []\n            }\n          },\n          () => {\n            // Get latest MSG\n            this.handleLastChats(\"GetFriendsMSG\");\n          }\n        );\n      }\n    });\n  };\n\n  // ----- // Handles Getting latest Chat messages and push them to props for people section\n  handleLastChats = ActionType => {\n    var lastChats = {},\n      inboxState = this.props.inboxState,\n      myName = inboxState.people[inboxState.myDataID].userName,\n      roomType = [\"GetFriendsMSG\", \"GetInitialMSG\"].includes(ActionType)\n        ? \"chatRooms\"\n        : \"myMSGRoom\";\n\n    for (const msgKey of Object.keys(this.state[roomType])) {\n      let msg = this.state[roomType][msgKey],\n        lastMSG = msg[msg.length - 1];\n      if (\n        lastMSG &&\n        (lastMSG.recipient === myName || lastMSG.name === myName)\n      ) {\n        let nameSort =\n          lastMSG.recipient === myName ? lastMSG.name : lastMSG.recipient;\n        lastChats[nameSort] = lastMSG;\n      }\n    }\n\n    switch (ActionType) {\n      case \"GetInitialMSG\":\n        this.props.latestChats(lastChats);\n\n        // Triggering friends function to send roomID to server so i can keep track who is who\n        var myID = inboxState.myDataID,\n          myDetail = {\n            myName: inboxState.people[myID].userName,\n            roomID: socket.id,\n            id: myID,\n            uuID: Cookie(\"GET\", [\"uuID\"])[0]\n          };\n\n        this.getFriendMessage(myDetail);\n        break;\n\n      default:\n        // Clear Text Area After setting to state\n        document.querySelector(\"#userMessage\").value = \"\";\n\n        this.props.latestChats({\n          ...this.props.profileDetails.latestChats,\n          ...lastChats\n        });\n    }\n  };\n\n  // ----- // Handles Video or Audio Call Actions\n  HandlePhoneCall = type => {\n    let phone = this.state.togglePhoneCall ? false : true;\n    let zIndex = this.state.PhoneCallStyle[\"z-index\"] === \"-1\" ? \"3\" : \"-1\";\n\n    this.setState({\n      togglePhoneCall: phone,\n      phoneType: type,\n      PhoneCallStyle: { \"z-index\": zIndex }\n    });\n  };\n\n  render() {\n    var inboxState = this.props.inboxState,\n      togglePage = this.props.togglePage,\n      textAreaStyle = this.state.textAreaStyle,\n      activeChatID = inboxState.activeChatID,\n      userName = \"\",\n      picture = \"\",\n      myID = inboxState.myDataID,\n      messageData = \"\",\n      myUserName = \"\",\n      checkKey = \"\";\n\n    if (activeChatID !== null) {\n      userName = inboxState.people[activeChatID].userName;\n      picture = inboxState.people[activeChatID].picture;\n      var friendsMSGkey = inboxState.people[activeChatID].messageKey,\n        myMSGkey = inboxState.people[myID].messageKey,\n        key1 = friendsMSGkey + myMSGkey,\n        key2 = myMSGkey + friendsMSGkey,\n        checkKey = this.state.chatRooms[key1] ? key1 : key2,\n        myUserName = inboxState.people[myID].userName;\n\n      messageData = this.state.chatRooms[checkKey];\n\n      // Puts \"|\" in the middle of the messagekey so we can search if that perticular key\n      // exists in mySQL table\n      if (!messageData) {\n        let tempKey1 = checkKey.split(myMSGkey),\n          tempKey2 =\n            tempKey1[0] === \"\"\n              ? myMSGkey + \"|\" + tempKey1[1]\n              : tempKey1[1] + \"|\" + myMSGkey;\n        checkKey = tempKey2;\n        messageData = [];\n      }\n\n      // Marges messages from my local chat and the updated friend chat\n      var myChats = this.state.myMSGRoom[key2];\n      myChats = myChats ? myChats : [];\n      messageData = [...messageData, ...myChats];\n    }\n\n    if (inboxState.toggleType === \"MessagingBoard\") {\n      return (\n        <>\n          <div className=\"MessagingBoard\">\n            <div className=\"Header\">\n              <i\n                className=\"fas fa-chevron-left\"\n                onClick={() => togglePage(\"Messages\")}\n              />\n              <div className=\"MSGheader1\">\n                <div className=\"msgPic\">\n                  <img src={picture} alt=\"User\" />\n                  <span id=\"status\" />\n                </div>\n                <div>\n                  <span>{userName}</span>\n                  <time>Now Active</time>\n                </div>\n              </div>\n\n              <div className=\"header2\">\n                <i\n                  className=\"fas fa-phone\"\n                  onClick={() => this.HandlePhoneCall(\"phone\")}\n                />\n                <i\n                  className=\"fas fa-video\"\n                  onClick={() => this.HandlePhoneCall(\"video\")}\n                />\n              </div>\n            </div>\n\n            {/* A place where messages show */}\n            <ul className=\"msgDashboard\">\n              <Texts\n                ChatData={messageData}\n                myUserName={myUserName}\n                ImgSrc={picture}\n              />\n            </ul>\n\n            {/* TexTING aREA */}\n            <TextArea />\n          </div>\n\n          <div className=\"PhoneCallPhoneCall\" style={this.state.PhoneCallStyle}>\n              <PhoneCall\n                recipientData={{\"name\":userName,\"pic\":picture}}\n                phoneType={this.state.phoneType}\n                HandlePhoneCall={this.HandlePhoneCall}\n              />\n          </div>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\n// export default MessagingBoard;\nconst mapDispatchToProps = dispatch => {\n  return {\n    latestChats: stutas => {\n      dispatch({ type: \"LATESTCHATS\", stutas: stutas });\n    }\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    profileDetails: { ...state.ProfileDB }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagingBoard);\n","import React from \"react\";\n// import LZString from \"lz-string\";\n\nexport default function InboxPeople({\n  people,\n  togglePage,\n  myDataID,\n  latestChats\n}) {\n  var myName = people[myDataID].userName,\n    chats = \"\",\n    timeStamp = \"\",\n    status,\n    paragraphStyle = {};\n\n  const People = () => {\n    return people.map(data => {\n      chats = `Say hello to ${data.userName}`;\n      timeStamp = \" \";\n      status = data.status === \"Online\" ? \"status\" : \"\";\n      paragraphStyle = { \"font-weight\": \"600\",\"color\": \"rgba(58, 66, 79,.9)\"};\n\n      if (data.ID !== myDataID) {\n        if (latestChats !== undefined && latestChats[data.userName]) {\n          let userDetail = latestChats[data.userName];\n\n          // paragraphStyle\n          // Check to see if the text is from you or your friend\n          if (userDetail.recipient === myName) {\n            chats = \" \" + userDetail.message;\n          } else {\n            paragraphStyle = {};\n            chats = \"You: \" + userDetail.message;\n          }\n        }\n\n        return (\n          <>\n            <div\n              className=\"Person\"\n              messagekey={data.messageKey}\n              onClick={() => togglePage(\"MessagingBoard\", data.ID)}\n            >\n              <span id=\"ProfilePic\">\n                <img src={data.picture} alt=\"IMG\" />\n                <span id={status} />\n              </span>\n              <div className=\"details\">\n                <h4>{data.userName}</h4>\n                <p style={paragraphStyle}>{chats}</p>\n              </div>\n              <time>{timeStamp}</time>\n            </div>\n          </>\n        );\n      } else {\n        return <></>;\n      }\n    });\n  };\n\n  // var PeopleDATA  = JSON.stringify(People());\n  return <People />;\n}\n","import React from \"react\";\n\nexport default function Stories(data) {\n  console.log(\"Active Stories\");\n\n  const DailySnapShoots = data => {\n    return [].map(info => {\n      return (\n        <div className=\"DailySnap\">\n          <img src=\"##\" alt=\"name\" />\n          <label>---</label>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div className=\"DailySnap addStory\">\n        <i class=\"fas fa-plus\"/>\n        <label>Your Story</label>\n      </div>\n\n      <DailySnapShoots />\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction ProfileManager() {\n  return (\n    <>\n      {/* User Email */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Email</h4>\n          <p>------------</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n\n      {/* User Phone number */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Phone</h4>\n          <p>------------</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n\n      {/* Your Gender */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Gender</h4>\n          <p>-------</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n\n      {/* Age */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Your Age</h4>\n          <p>--</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n\n      {/* Allow Calls */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Allow Calls</h4>\n          <p>Yes</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n\n      {/* Make Profile Public */}\n      <div className=\"Person\">\n        <div className=\"details\">\n          <h4>Make Profile Public</h4>\n          <p>Yes</p>\n        </div>\n        <i class=\"fas fa-pen\"/>\n      </div>\n    </>\n  );\n}\n\nexport default ProfileManager;\n","import React from \"react\";\nimport addStory from \"../../IMG/story.svg\";\nimport LZString from \"lz-string\";\n\nexport default function OnlinePeople({ people, togglePage, myDataID }) {\n  const People = () => {\n    try {\n      return people.map(data => {\n        if (data.ID !== myDataID && data.status === \"Online\") {\n          return (\n            <div className=\"onlinePeople\">\n              <div\n                key={Math.random()}\n                className=\"Onlineperson\"\n                onClick={() => togglePage(\"MessagingBoard\", data.ID)}\n              >\n                <img src={data.picture} />\n                <span id=\"status\" />\n                {/* <h6>{data.userName}</h6> */}\n              </div>\n            </div>\n          );\n        } else {\n          return <></>;\n        }\n      });\n    } catch (error) {\n      return <>Erro</>;\n    }\n  };\n\n  return <People />;\n}\n","import React, { Component } from \"react\";\nimport \"../../CSS/UserProfile.css\";\nimport \"../../CSS/Stories.css\";\nimport Fire from \"../../FIREBASE/FBConfig\";\nimport socket from \"../Socket\";\nimport { connect } from \"react-redux\";\nimport MessagingBoard from \"../MessageHandler/MessagingBoard\";\nimport People from \"./People\";\nimport Stories from \"./Stories\";\nimport YourProfileInfor from \"./YourProfileInfor\";\nimport OnlinePeople from \"./OnlinePeople\";\nimport Cookie from \"../Cookie\";\nimport loaderGIF from \"../../IMG/Loader.gif\";\nimport LZString from \"lz-string\";\n\nclass MainPage extends Component {\n  state = {\n    myDataID: null,\n    people: null,\n    stories: null,\n    activeChatID: null,\n    toggleType: \"Messages\",\n    ProfileStyle: { color: \"#8486a2\" },\n    StoriesStyle: { color: \"#8486a2\" },\n    MainPageStyle: { color: \"white\" }\n  };\n\n  componentWillMount() {\n    // Prevent user to see the main interface unless signed in\n    let myDetails = this.props.myDetails;\n    if (Object.keys(myDetails).length !== 0) {\n      Cookie(\"SET\", { ...myDetails });\n    } else {\n      var cookieData = Cookie(\"GET\", [\"uuID\", \"checkInType\"]);\n\n      if (cookieData[0] !== null || cookieData[1] !== null) {\n        myDetails = {\n          uuID: cookieData[0],\n          checkInType: \"Login\"\n        };\n      } else {\n        this.props.history.push(\"/\");\n      }\n    }\n\n    // Triggers get profile data for all users\n\n    this.getUsersProfileDATA(myDetails);\n\n    // Triggers When user goes offline\n    socket.on(\"UserOffline\", ID => {\n      var people = this.state.people;\n\n      if (people) {\n        people[ID].status = \"Offline\";\n        this.setState({\n          people: people\n        });\n      }\n    });\n  }\n\n  //----// Getting all users profile data\n  getUsersProfileDATA = myDetails => {\n    let uuID = myDetails.uuID;\n    socket.emit(\"getUsersProfileDATA\", myDetails, uuID);\n\n    socket.on(\"returnUsersProfileDATA\", (res, action) => {\n      if (action === \"None\") {\n        this.setState({\n          ...this.state,\n          ...res\n        });\n      } else if (action === \"Broadcast\") {\n        console.log(res);\n        let updatedData = this.state.people;\n        updatedData[res.ID] = res;\n\n        this.setState({\n          people: [...updatedData]\n        });\n      }\n    });\n  };\n\n  //----// Handling Page toggle from \"MessagingBoard\",\"Friends\" and \"Inbox\"\n  togglePage = (PageType, activeChatID) => {\n    let event = activeChatID;\n\n    switch (PageType) {\n      // Toggles to MessagingBoard\n      case \"MessagingBoard\":\n        this.setState({\n          toggleType: PageType,\n          activeChatID: activeChatID\n        });\n        break;\n\n      // Toggles to inbox\n      case \"MainPage\":\n        this.setState({\n          toggleType: PageType,\n          ProfileStyle: { color: \"#8486a2\" },\n          StoriesStyle: { color: \"#8486a2\" },\n          MainPageStyle: { color: \"white\" }\n        });\n        break;\n\n      case \"Messages\":\n        this.setState({\n          toggleType: PageType,\n          ProfileStyle: { color: \"#8486a2\" },\n          StoriesStyle: { color: \"#8486a2\" },\n          MainPageStyle: { color: \"white\" }\n        });\n        break;\n\n      case \"Stories\":\n        this.setState({\n          toggleType: PageType,\n          ProfileStyle: { color: \"#8486a2\" },\n          StoriesStyle: { color: \"white\" },\n          MainPageStyle: { color: \"#8486a2\" }\n        });\n        break;\n\n      case \"Profile\":\n        this.setState({\n          toggleType: PageType,\n          ProfileStyle: { color: \"white\" },\n          StoriesStyle: { color: \"#8486a2\" },\n          MainPageStyle: { color: \"#8486a2\" }\n        });\n        break;\n    }\n  };\n\n  render() {\n    if (!this.state.people) {\n      // Renders this screen if loading\n      return (\n        <div id=\"Loader\">\n          <img src={loaderGIF} />\n          <small>Loading...</small>\n        </div>\n      );\n    } else {\n      // Renders the following depending on page toggle\n      var myID = this.state.myDataID,\n        picture = this.state.people[myID].picture,\n        userName = this.state.people[myID].userName,\n        InboxElements = () => {\n          return <></>;\n        },\n        ExploreStories = () => {\n          return <></>;\n        },\n        MyProfile = () => {\n          return <></>;\n        },\n        Footer = () => {\n          return (\n            <>\n              <div>\n                <i\n                  className=\"fas fa-comment\"\n                  id=\"Messages\"\n                  style={this.state.MainPageStyle}\n                  onClick={e => this.togglePage(\"Messages\", e)}\n                />\n                {/* <div className=\"Notifications\">12232</div> */}\n              </div>\n\n              <i\n                className=\"fas fa-compass\"\n                id=\"Stories\"\n                style={this.state.StoriesStyle}\n                onClick={e => this.togglePage(\"Stories\", e)}\n              />\n\n              <i\n                className=\"fas fa-user-cog\"\n                id=\"Profile\"\n                style={this.state.ProfileStyle}\n                onClick={e => this.togglePage(\"Profile\", e)}\n              />\n            </>\n          );\n        };\n\n      switch (this.state.toggleType) {\n        case \"MessagingBoard\":\n          Footer = () => {\n            return <></>;\n          };\n          break;\n\n        case \"Stories\":\n          ExploreStories = () => {\n            return (\n              <div className=\"Stories\" style={this.state.stories}>\n                <Stories />\n              </div>\n            );\n          };\n          break;\n\n        case \"Profile\":\n          MyProfile = () => {\n            return (\n              <div className=\"YourProfileInfor\">\n                <div className=\"myDetails\">\n                  <img src={picture} id=\"userPicture\" alt=\"IMG\" />\n                  <span className=\"editImg\">\n                    <i className=\"fas fa-user-edit\" />\n                  </span>\n                  <span className=\"userName\">{userName}</span>\n                </div>\n\n                <div className=\"MoreDetail\">\n                  <YourProfileInfor />\n                </div>\n              </div>\n            );\n          };\n          break;\n\n        default:\n          InboxElements = () => {\n            return (\n              <>\n                <People\n                  togglePage={this.togglePage}\n                  people={this.state.people}\n                  myDataID={this.state.myDataID}\n                  latestChats={this.props.latestChats}\n                />\n              </>\n            );\n          };\n      }\n\n      // Renders The following search bar and online people depending on page type\n      const HeaderStatus = () => {\n        var PeopleOnline = () => {\n            return <></>;\n          },\n          SearchBar = () => {\n            return <></>;\n          };\n\n        if (this.state.toggleType === \"Messages\") {\n          PeopleOnline = () => {\n            return (\n              <OnlinePeople\n                togglePage={this.togglePage}\n                people={this.state.people}\n                myDataID={this.state.myDataID}\n              />\n            );\n          };\n        }\n\n        if ([\"Messages\", \"Stories\"].includes(this.state.toggleType)) {\n          SearchBar = () => {\n            return <input type=\"search\" placeholder=\"Search by name\" />;\n          };\n        }\n\n        return (\n          <>\n            <PeopleOnline />\n            <SearchBar />\n          </>\n        );\n      };\n\n      return (\n        <section className=\"UserInterface\">\n          <div className=\"Profile\">\n            <div className=\"scollArea\">\n              <div className=\"Header\">\n                <div className=\"headerCont\">\n                  <div className=\"header1\">\n                    <span id=\"LogoDescription\">{this.state.toggleType}</span>\n                  </div>\n                  <div className=\"header2\">\n                    <i className=\"fas fa-camera-retro\" />\n                    <i className=\"fas fa-feather-alt\" />\n                  </div>\n                </div>\n\n                <div className=\"OnlineCont\">\n                  <HeaderStatus />\n                </div>\n              </div>\n\n              {/* Display People that have ever created an account */}\n              <div className=\"inboxSection\">\n                <InboxElements />\n              </div>\n\n              {/* Displays Stories for everyone*/}\n              <ExploreStories />\n\n              {/* Shows your profile */}\n              <MyProfile />\n            </div>\n          </div>\n\n          <div className=\"navFooter\">\n            <Footer />\n          </div>\n\n          {/* --------------- Massaging Section --------------- */}\n          <MessagingBoard\n            inboxState={{ ...this.state }}\n            style={this.state.inboxToMessage}\n            togglePage={this.togglePage}\n            activeChatID={this.state.activeChatID}\n          />\n        </section>\n      );\n    }\n  }\n}\n\n// Dispatch infor or get data from Redux\nconst mapDispatchToProps = dispatch => {\n  return {\n    myProfileDetails: data => {\n      dispatch({ type: \"UPDATE\", data: data });\n    }\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    myDetails: { ...state.ProfileDB },\n    latestChats: state.ProfileDB.latestChats\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainPage);\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Login from \"./JS/LoginHandler/LoginPage\";\nimport ProfilePage from \"./JS/ProfileHandler/MainPage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n          <Route path=\"/chat\" component={ProfilePage} />\n          <Route path=\"/\" component={Login} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore} from \"redux\";\nimport RootReducer from \"./REDUCERS/RootReducer\";\nimport { Provider } from \"react-redux\";\nimport \"./CSS/Index.css\";\nimport App from \"./App.js\";\n\n\nconst store = createStore(RootReducer);\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, \n    document.getElementById(\"root\")\n    );\n\nserviceWorker.unregister();\n\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/defaultPic.6bc46237.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Loader.aabf6174.gif\";"],"sourceRoot":""}